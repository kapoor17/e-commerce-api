openapi: 3.0.3
info:
  title: E-Commerce-App - OpenAPI 3.0
  version: 1.0.0
  description: 'This is a E Commerce Store Server based on the OpenAPI 3.0 specification. '
  contact:
    email: himanshu.kapur17@gmail.com
    name: Himanshu Kapoor
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:4000
tags:
  - name: Authentication
    description: Operations related to authenticating a user
  - name: Products
    description: Operations related to Products of our store
  - name: Cart
    description: Operations related to the cart of our current user
  - name: Checkout
    description: Operations related to placing a new order
  - name: Orders
    description: Operations related to the orders of our current user
paths:
  /auth/login:
    summary: Logs in a new user
    post:
      summary: Logs in a user
      operationId: register_user
      requestBody:
        description: A user's credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: Success, User Logged in
          content:
            application/json:
              examples:
                user:
                  value: |-
                    {
                      "token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
        400:
          description: Error, Bad Request
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"Bad Request"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"Wrong password"
                    }
        404:
          description: Error, User not found
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"User not found"
                    }
      tags:
        - Authentication
  /auth/register:
    summary: Registers a new user
    post:
      summary: Registers a new user
      operationId: login_user
      requestBody:
        description: A user's credentials and information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Success, User Created
          content:
            application/json:
              examples:
                user:
                  value: |-
                    {
                      "token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
        400:
          description: Error, Bad Request
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"Bad Request"
                    }
        409:
          description: Error, User already exists
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"User already exists"
                    }
      tags:
        - Authentication
  /products:
    summary: Fetches or creates products
    get:
      summary: Fetches all products in our inventory
      operationId: get_products
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Array of products:
                  value: |-
                    [
                        {
                            "name": "Product A",
                            "description": "This is the description for Product A.",
                            "price": 20,
                            "rating": 4,
                            "created_at": "2024-04-10T08:00:00Z",
                            "updated_at": "2024-04-10T08:00:00Z"
                        },
                        {
                            "name": "Product B",
                            "description": "This is the description for Product B.",
                            "price": 30,
                            "rating": 5,
                            "created_at": "2024-04-09T10:00:00Z",
                            "updated_at": "2024-04-09T10:00:00Z"
                        },
                        {
                            "name": "Product C",
                            "description": "This is the description for Product C.",
                            "price": 25,
                            "rating": 4,
                            "created_at": "2024-04-08T12:00:00Z",
                            "updated_at": "2024-04-08T12:00:00Z"
                        }
                    ]
      tags:
        - Products
    post:
      summary: Creates a new Product
      operationId: create_product
      requestBody:
        description: A new product's data in json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Success, Product added
          content:
            application/json:
              examples:
                Product:
                  value: |-
                    {
                      "name": "Product C",
                      "description": "This is the description for Product C.",
                      "price": 25,
                      "rating": 4,
                      "created_at": "2024-04-08T12:00:00Z",
                      "updated_at": "2024-04-08T12:00:00Z"
                    }
        400:
          description: Error, Bad Request
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"Bad Request"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error":"token invalid"
                    }
      tags:
        - Products
  /products/{product_id}:
    summary: Interact with a single product
    get:
      summary: Gets a single Product
      operationId: get_product
      parameters:
        - name: product_id
          in: path
          description: The id of the order.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Product:
                  value: |-
                    {
                      "name": "Product C",
                      "description": "This is the description for Product C.",
                      "price": 25,
                      "rating": 4,
                      "created_at": "2024-04-08T12:00:00Z",
                      "updated_at": "2024-04-08T12:00:00Z"
                    }
        404:
          description: Error, product doesn't exists
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "Invalid product_id"
                    }
      tags:
        - Products
    put:
      summary: Updates a single Product
      operationId: patch_product
      parameters:
        - name: product_id
          in: path
          description: The id of the order.
          required: true
          schema:
            type: string
      requestBody:
        description: A product's data in json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Success, Product updated
          content:
            application/json:
              examples:
                Product:
                  value: |-
                    {
                      "name": "Product C",
                      "description": "This is the description for Product C.",
                      "price": 25,
                      "rating": 4,
                      "created_at": "2024-04-08T12:00:00Z",
                      "updated_at": "2024-04-08T12:00:00Z"
                    }
        404:
          description: Error, product doesn't exists
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "Invalid product_id"
                    }
        400:
          description: Error, Bad Request
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "Bad Request"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Products
    delete:
      summary: Deletes a single Product
      operationId: delete_product
      parameters:
        - name: product_id
          in: path
          description: The id of the order.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success, Product deleted
          content:
            application/json:
              examples:
                Product:
                  value: |-
                    {
                      "name": "Product C",
                      "description": "This is the description for Product C.",
                      "price": 25,
                      "rating": 4,
                      "created_at": "2024-04-08T12:00:00Z",
                      "updated_at": "2024-04-08T12:00:00Z"
                    }
        404:
          description: Error, product doesn't exists
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "Invalid product_id"
                    }
        400:
          description: Error, Bad Request
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "Bad Request"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Products
  /cart:
    summary: To interact with the users cart
    get:
      summary: Return the current items added inside the cart
      operationId: get_cart
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Cart Items:
                  value: |-
                    {
                        "id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                        "created_at": "2024-04-10T08:00:00Z",
                        "updated_at": "2024-04-10T08:00:00Z",
                        "items": [
                          {
                            "id": "384e346e-b936-4e0a-b6c7-7fbcb5d7438e",
                            "created_at": "2024-04-10T08:00:00Z",
                            "updated_at": "2024-04-10T08:00:00Z",
                            "cart_id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                            "product_id": "d8676c24-1e1a-4e63-8b09-4d43b5e9ee9d",
                            "quantity": 2
                          },
                          {
                            "id": "384e346e-b936-4e0a-b6c7-7fbcb5d7438e",
                            "created_at": "2024-04-10T08:00:00Z",
                            "updated_at": "2024-04-10T08:00:00Z",
                            "cart_id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                            "product_id": "d8676c24-1e1a-4e63-8b09-4d43b5e9fe9d",
                            "quantity": 1
                          },
                          {
                            "id": "384e346e-b936-4e0a-b6c7-7fbcb5d7438e",
                            "created_at": "2024-04-10T08:00:00Z",
                            "updated_at": "2024-04-10T08:00:00Z",
                            "cart_id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                            "product_id": "d8676c24-1e1a-4e63-8b09-4d43b5e9ge9d",
                            "quantity": 3
                          }
                        ]
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Cart
  /cart/{cart_id}:
    summary: To perform crud operation on the cart
    delete:
      summary: Remove a cart instance
      operationId: delete_cart
      parameters:
      - name: cart_id
        in: path
        description: The id of the cart.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Cart:
                  value: |-
                    {
                        "id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                        "created_at": "2024-04-10T08:00:00Z",
                        "updated_at": "2024-04-10T08:00:00Z",
                        "user_id": "e0434c42-3asf9-4c9f-b86d-2sb0f81f24bs"
                    }
        404:
          description: Error, cart does not exist
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                        "error": "invalid cart_id"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Cart
  /cart/items:
    summary: To perform crud operation on the cart
    post:
      summary: Add an item to the cart
      description: ''
      operationId: create_cart_item
      requestBody:
        description: A cart item json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Cart Items:
                  value: |-
                    {
                      "id": "384e346e-b936-4e0a-b6c7-7fbcb5d7438e",
                      "created_at": "2024-04-10T08:00:00Z",
                      "updated_at": "2024-04-10T08:00:00Z",
                      "cart_id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                      "product_id": "d8676c24-1e1a-4e63-8b09-4d43b5e9ge9d",
                      "quantity": 3
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Cart
  /cart/items/{cart_item_id}:
    summary: To perform CRUD Operations on a single cart item
    parameters:
      - name: cart_item_id
        in: path
        description: The id of the cart item.
        required: true
        schema:
          type: string
    put:
      summary: Update quantity or other details of an item in the cart.
      description: ''
      operationId: update_cart_item
      requestBody:
        description: A cart item json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Cart Items:
                  value: |-
                    {
                      "id": "384e346e-b936-4e0a-b6c7-7fbcb5d7438e",
                      "created_at": "2024-04-10T08:00:00Z",
                      "updated_at": "2024-04-10T08:00:00Z",
                      "cart_id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                      "product_id": "d8676c24-1e1a-4e63-8b09-4d43b5e9ge9d",
                      "quantity": 3
                    }
        404:
          description: Error, cart item does not exist
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                        "error": "cart_item_id invalid"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Cart
    delete:
      summary: Delete a cart item
      description: ''
      operationId: delete_cart_item
      responses:
        200:
          description: Success
          content:
            application/json:
              examples:
                Cart Items:
                  value: |-
                    {
                      "id": "384e346e-b936-4e0a-b6c7-7fbcb5d7438e",
                      "created_at": "2024-04-10T08:00:00Z",
                      "updated_at": "2024-04-10T08:00:00Z",
                      "cart_id": "c0434c42-3d9d-4c9f-b86d-29b0f81f44bc",
                      "product_id": "d8676c24-1e1a-4e63-8b09-4d43b5e9ge9d",
                      "quantity": 3
                    }
        404:
          description: Error, cart item does not exist
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                        "error": "cart_item_id invalid"
                    }
        401:
          description: Error, Unauthorized
          content:
            application/json:
              examples:
                error:
                  value: |-
                    {
                      "error": "token invalid"
                    }
      tags:
        - Cart
  /checkout:
    post:
      summary: Process the checkout, which may include calculating the total etc
      description: ''
      operationId: checkout
      responses:
        default:
          description: Default error sample response
      tags:
        - Checkout
  /orders:
    summary: To get details regarding your orders
    get:
      summary: Retrieve a list of orders placed by the current user.
      description: ''
      operationId: get_orders
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
  /orders/{id}:
    summary: Return a specific order based on the id parameter
    parameters:
      - name: id
        in: path
        description: The id of the order.
        required: true
        schema:
          type: string
    get:
      summary: Return the specific order based on the id parameter
      description: ''
      operationId: get_order
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
components:
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        age:
          type: integer
        gender:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
      xml:
        name: User
    Address:
      type: object
      properties:
        street:
          type: string
        country:
          type: string
        state:
          type: string
        zip:
          type: string
      xml:
        name: Address
    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        rating:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
      xml:
        name: Product
    Order:
      type: object
      properties:
        id:
          type: string
        total_amount:
          type: integer
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        user_id:
          $ref: '#/components/schemas/User'
    OrderItem:
      type: object
      properties:
        id:
          type: string
        quantity:
          type: string
        total_amount:
          type: integer
        product_id:
          $ref: '#/components/schemas/Product'
    CartItem:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        cart_id:
          $ref: '#/components/schemas/Cart'
        product_id:
          $ref: '#/components/schemas/Product'
    Cart:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        user_id:
          $ref: '#/components/schemas/User'
